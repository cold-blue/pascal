/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

package compiler.lexanal;

import java.io.*;

import compiler.report.*;
import compiler.synanal.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>pascal.jflex</tt>
 */
public class PascalLex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\3\1\4\1\4\1\3\22\0\1\34\6\33\1\32"+
    "\1\45\1\47\1\54\1\51\1\42\1\56\1\43\1\33\1\36\11\35"+
    "\1\40\1\50\1\53\1\41\1\52\2\33\32\37\1\44\1\33\1\46"+
    "\1\55\1\37\1\33\1\5\1\12\1\16\1\7\1\13\1\24\1\14"+
    "\1\30\1\15\2\37\1\23\1\27\1\6\1\17\1\26\1\37\1\10"+
    "\1\20\1\21\1\25\1\22\1\31\1\37\1\11\1\37\1\2\1\33"+
    "\1\1\1\33\6\0\1\4\u1fa2\0\1\4\1\4\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\17\5\1\1\2\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\4"+
    "\1\26\1\27\5\5\1\30\6\5\1\31\2\5\1\32"+
    "\1\33\2\5\1\34\7\5\2\0\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\5\1\44\1\45\1\46"+
    "\3\5\1\47\7\5\1\50\1\5\1\51\3\5\1\52"+
    "\1\35\1\53\4\5\1\54\2\5\1\55\1\56\1\57"+
    "\1\60\4\5\1\61\1\5\1\62\2\5\1\63\3\5"+
    "\1\64\1\65\5\5\1\66\1\67\1\5\1\70\1\5"+
    "\1\71\1\5\1\72";

  private static int [] zzUnpackAction() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\136\0\136\0\215\0\274\0\353"+
    "\0\u011a\0\u0149\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263"+
    "\0\u0292\0\u02c1\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\136"+
    "\0\u03db\0\136\0\136\0\u040a\0\136\0\136\0\136\0\136"+
    "\0\136\0\136\0\u0439\0\u0468\0\136\0\136\0\136\0\136"+
    "\0\136\0\136\0\u0497\0\u04c6\0\u04f5\0\u0524\0\u0553\0\u0178"+
    "\0\u0582\0\u05b1\0\u05e0\0\u060f\0\u063e\0\u066d\0\u0178\0\u069c"+
    "\0\u06cb\0\u0178\0\u0178\0\u06fa\0\u0729\0\u0178\0\u0758\0\u0787"+
    "\0\u07b6\0\u07e5\0\u0814\0\u0843\0\u0872\0\u08a1\0\u08d0\0\u08ff"+
    "\0\136\0\136\0\136\0\136\0\136\0\u0178\0\u092e\0\u0178"+
    "\0\u0178\0\u0178\0\u095d\0\u098c\0\u09bb\0\u0178\0\u09ea\0\u0a19"+
    "\0\u0a48\0\u0a77\0\u0aa6\0\u0ad5\0\u0b04\0\u0178\0\u0b33\0\u0178"+
    "\0\u0b62\0\u0b91\0\u0bc0\0\136\0\136\0\u0bef\0\u0c1e\0\u0c4d"+
    "\0\u0c7c\0\u0cab\0\u0178\0\u0cda\0\u0d09\0\u0178\0\u0178\0\u0178"+
    "\0\u0178\0\u0d38\0\u0d67\0\u0d96\0\u0dc5\0\u0178\0\u0df4\0\u0178"+
    "\0\u0e23\0\u0e52\0\u0178\0\u0e81\0\u0eb0\0\u0edf\0\u0178\0\u0178"+
    "\0\u0f0e\0\u0f3d\0\u0f6c\0\u0f9b\0\u0fca\0\u0178\0\u0178\0\u0ff9"+
    "\0\u0178\0\u1028\0\u0178\0\u1057\0\u0178";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\0\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\13\1\16\1\17\1\20"+
    "\1\13\1\21\1\22\1\13\1\23\1\13\1\24\2\13"+
    "\1\25\1\26\1\3\1\6\1\27\1\30\1\13\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\6\1\0\27\50\1\6\22\50\62\0\1\6"+
    "\30\0\1\6\27\0\1\13\1\53\1\13\1\54\21\13"+
    "\3\0\3\13\24\0\10\13\1\55\1\13\1\56\12\13"+
    "\3\0\3\13\24\0\10\13\1\57\1\13\1\60\12\13"+
    "\3\0\3\13\24\0\6\13\1\61\16\13\3\0\3\13"+
    "\24\0\25\13\3\0\3\13\24\0\6\13\1\62\3\13"+
    "\1\63\12\13\3\0\3\13\24\0\1\13\1\64\14\13"+
    "\1\65\6\13\3\0\3\13\24\0\1\13\1\66\15\13"+
    "\1\67\5\13\3\0\3\13\24\0\12\13\1\70\10\13"+
    "\1\71\1\13\3\0\3\13\24\0\3\13\1\72\13\13"+
    "\1\73\5\13\3\0\3\13\24\0\3\13\1\74\1\75"+
    "\5\13\1\76\10\13\1\77\1\13\3\0\3\13\24\0"+
    "\1\100\24\13\3\0\3\13\24\0\1\101\11\13\1\102"+
    "\5\13\1\103\4\13\3\0\3\13\24\0\3\13\1\104"+
    "\21\13\3\0\3\13\24\0\23\13\1\105\1\13\3\0"+
    "\3\13\17\0\1\106\2\107\2\106\25\107\1\110\24\107"+
    "\35\0\2\27\61\0\1\111\60\0\1\112\54\0\1\113"+
    "\56\0\1\114\10\0\1\115\11\0\2\13\1\116\22\13"+
    "\3\0\3\13\24\0\3\13\1\117\21\13\3\0\3\13"+
    "\24\0\16\13\1\120\6\13\3\0\3\13\24\0\14\13"+
    "\1\121\10\13\3\0\3\13\24\0\15\13\1\122\7\13"+
    "\3\0\3\13\24\0\11\13\1\123\13\13\3\0\3\13"+
    "\24\0\7\13\1\124\15\13\3\0\3\13\24\0\12\13"+
    "\1\125\12\13\3\0\3\13\24\0\2\13\1\126\22\13"+
    "\3\0\3\13\24\0\13\13\1\127\11\13\3\0\3\13"+
    "\24\0\14\13\1\130\10\13\3\0\3\13\24\0\1\13"+
    "\1\131\23\13\3\0\3\13\24\0\1\132\24\13\3\0"+
    "\3\13\24\0\20\13\1\133\4\13\3\0\3\13\24\0"+
    "\21\13\1\134\3\13\3\0\3\13\24\0\6\13\1\135"+
    "\16\13\3\0\3\13\24\0\3\13\1\136\21\13\3\0"+
    "\3\13\24\0\16\13\1\137\6\13\3\0\3\13\24\0"+
    "\3\13\1\140\21\13\3\0\3\13\24\0\1\13\1\141"+
    "\23\13\3\0\3\13\24\0\12\13\1\142\12\13\3\0"+
    "\3\13\24\0\10\13\1\143\14\13\3\0\3\13\17\0"+
    "\32\106\1\144\56\106\1\145\24\106\32\0\1\146\31\0"+
    "\1\147\24\13\3\0\3\13\24\0\12\13\1\150\12\13"+
    "\3\0\3\13\24\0\10\13\1\151\14\13\3\0\3\13"+
    "\24\0\16\13\1\152\6\13\3\0\3\13\24\0\6\13"+
    "\1\153\16\13\3\0\3\13\24\0\6\13\1\154\16\13"+
    "\3\0\3\13\24\0\13\13\1\155\11\13\3\0\3\13"+
    "\24\0\3\13\1\156\21\13\3\0\3\13\24\0\6\13"+
    "\1\157\16\13\3\0\3\13\24\0\6\13\1\160\16\13"+
    "\3\0\3\13\24\0\1\13\1\161\23\13\3\0\3\13"+
    "\24\0\13\13\1\133\11\13\3\0\3\13\24\0\11\13"+
    "\1\162\13\13\3\0\3\13\24\0\7\13\1\163\1\13"+
    "\1\164\13\13\3\0\3\13\24\0\16\13\1\165\6\13"+
    "\3\0\3\13\51\0\1\145\31\0\4\13\1\166\20\13"+
    "\3\0\3\13\24\0\3\13\1\167\21\13\3\0\3\13"+
    "\24\0\1\13\1\170\23\13\3\0\3\13\24\0\6\13"+
    "\1\171\16\13\3\0\3\13\24\0\7\13\1\172\15\13"+
    "\3\0\3\13\24\0\14\13\1\173\10\13\3\0\3\13"+
    "\24\0\14\13\1\174\10\13\3\0\3\13\24\0\3\13"+
    "\1\175\21\13\3\0\3\13\24\0\6\13\1\176\16\13"+
    "\3\0\3\13\24\0\6\13\1\177\16\13\3\0\3\13"+
    "\24\0\2\13\1\200\22\13\3\0\3\13\24\0\1\201"+
    "\24\13\3\0\3\13\24\0\6\13\1\202\16\13\3\0"+
    "\3\13\24\0\10\13\1\203\14\13\3\0\3\13\24\0"+
    "\1\204\24\13\3\0\3\13\24\0\2\13\1\205\22\13"+
    "\3\0\3\13\24\0\1\13\1\206\23\13\3\0\3\13"+
    "\24\0\3\13\1\207\21\13\3\0\3\13\24\0\12\13"+
    "\1\210\12\13\3\0\3\13\24\0\22\13\1\211\2\13"+
    "\3\0\3\13\24\0\20\13\1\212\4\13\3\0\3\13"+
    "\24\0\1\13\1\213\23\13\3\0\3\13\24\0\3\13"+
    "\1\214\21\13\3\0\3\13\24\0\6\13\1\215\16\13"+
    "\3\0\3\13\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4230];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\3\11\22\1\1\11\1\1\2\11\1\1\6\11"+
    "\2\1\6\11\33\1\2\0\1\1\5\11\26\1\2\11"+
    "\50\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private PascalSym sym(int type) {
    	String sequence = yytext();
    	/*if(type == PascalTok.CHAR_CONST) {
    		sequence = sequence.substring(1, sequence.length()-1);
    	}*/
    
    	if(sequence.equals("''''")) {
    		return new PascalSym(type, yyline + 1, yycolumn + 1, "'");
    	}
        return new PascalSym(type, yyline + 1, yycolumn + 1, sequence);
    }
int bracketCount = 0;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PascalLex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PascalLex(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 136) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public PascalSym next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { compiler.report.Report.error("Character not recognizable as valid Pascal keyword, symbol, name, identifier or constant.", yyline+1, yycolumn+1, -1);
          }
        case 59: break;
        case 2: 
          { compiler.report.Report.error("At least one too many } in your code!", yyline+1, yycolumn+1, -1);
          }
        case 60: break;
        case 3: 
          { bracketCount++; yybegin(COMMENT);
          }
        case 61: break;
        case 4: 
          { 
          }
        case 62: break;
        case 5: 
          { return sym(PascalTok.IDENTIFIER);
          }
        case 63: break;
        case 6: 
          { return sym(PascalTok.INT_CONST);
          }
        case 64: break;
        case 7: 
          { return sym(PascalTok.COLON);
          }
        case 65: break;
        case 8: 
          { return sym(PascalTok.EQU);
          }
        case 66: break;
        case 9: 
          { return sym(PascalTok.COMMA);
          }
        case 67: break;
        case 10: 
          { return sym(PascalTok.DOT);
          }
        case 68: break;
        case 11: 
          { return sym(PascalTok.LBRACKET);
          }
        case 69: break;
        case 12: 
          { return sym(PascalTok.LPARENTHESIS);
          }
        case 70: break;
        case 13: 
          { return sym(PascalTok.RBRACKET);
          }
        case 71: break;
        case 14: 
          { return sym(PascalTok.RPARENTHESIS);
          }
        case 72: break;
        case 15: 
          { return sym(PascalTok.SEMIC);
          }
        case 73: break;
        case 16: 
          { return sym(PascalTok.ADD);
          }
        case 74: break;
        case 17: 
          { return sym(PascalTok.GTH);
          }
        case 75: break;
        case 18: 
          { return sym(PascalTok.LTH);
          }
        case 76: break;
        case 19: 
          { return sym(PascalTok.MUL);
          }
        case 77: break;
        case 20: 
          { return sym(PascalTok.PTR);
          }
        case 78: break;
        case 21: 
          { return sym(PascalTok.SUB);
          }
        case 79: break;
        case 22: 
          { bracketCount --; 
									  if(bracketCount == 0) 
										yybegin(YYINITIAL);
          }
        case 80: break;
        case 23: 
          { bracketCount++;
          }
        case 81: break;
        case 24: 
          { return sym(PascalTok.DO);
          }
        case 82: break;
        case 25: 
          { return sym(PascalTok.IF);
          }
        case 83: break;
        case 26: 
          { return sym(PascalTok.OR);
          }
        case 84: break;
        case 27: 
          { return sym(PascalTok.OF);
          }
        case 85: break;
        case 28: 
          { return sym(PascalTok.TO);
          }
        case 86: break;
        case 29: 
          { return sym(PascalTok.CHAR_CONST);
          }
        case 87: break;
        case 30: 
          { return sym(PascalTok.ASSIGN);
          }
        case 88: break;
        case 31: 
          { return sym(PascalTok.DOTS);
          }
        case 89: break;
        case 32: 
          { return sym(PascalTok.GEQ);
          }
        case 90: break;
        case 33: 
          { return sym(PascalTok.LEQ);
          }
        case 91: break;
        case 34: 
          { return sym(PascalTok.NEQ);
          }
        case 92: break;
        case 35: 
          { return sym(PascalTok.AND);
          }
        case 93: break;
        case 36: 
          { return sym(PascalTok.NIL);
          }
        case 94: break;
        case 37: 
          { return sym(PascalTok.NOT);
          }
        case 95: break;
        case 38: 
          { return sym(PascalTok.DIV);
          }
        case 96: break;
        case 39: 
          { return sym(PascalTok.END);
          }
        case 97: break;
        case 40: 
          { return sym(PascalTok.VAR);
          }
        case 98: break;
        case 41: 
          { return sym(PascalTok.FOR);
          }
        case 99: break;
        case 42: 
          { compiler.report.Report.error("Invalid character definition.", yyline+1, yycolumn+1, -1);
          }
        case 100: break;
        case 43: 
          { compiler.report.Report.error("Invalid character. For ', use a sequence of four characters '.", yyline+1, yycolumn+1, -1);
          }
        case 101: break;
        case 44: 
          { return sym(PascalTok.ELSE);
          }
        case 102: break;
        case 45: 
          { return sym(PascalTok.CHAR);
          }
        case 103: break;
        case 46: 
          { return sym(PascalTok.BOOL_CONST);
          }
        case 104: break;
        case 47: 
          { return sym(PascalTok.TYPE);
          }
        case 105: break;
        case 48: 
          { return sym(PascalTok.THEN);
          }
        case 106: break;
        case 49: 
          { return sym(PascalTok.ARRAY);
          }
        case 107: break;
        case 50: 
          { return sym(PascalTok.BEGIN);
          }
        case 108: break;
        case 51: 
          { return sym(PascalTok.CONST);
          }
        case 109: break;
        case 52: 
          { return sym(PascalTok.WHILE);
          }
        case 110: break;
        case 53: 
          { return sym(PascalTok.RECORD);
          }
        case 111: break;
        case 54: 
          { return sym(PascalTok.BOOL);
          }
        case 112: break;
        case 55: 
          { return sym(PascalTok.INT);
          }
        case 113: break;
        case 56: 
          { return sym(PascalTok.PROGRAM);
          }
        case 114: break;
        case 57: 
          { return sym(PascalTok.FUNCTION);
          }
        case 115: break;
        case 58: 
          { return sym(PascalTok.PROCEDURE);
          }
        case 116: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 	if(bracketCount == 0)
    	return new PascalSym(PascalTok.EOF);
    else {
    	compiler.report.Report.error("You forgot to close some of your { brackets! Compiler error at line "+yyline+", column "+yycolumn+".", yyline, yycolumn, -1);
    }
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
